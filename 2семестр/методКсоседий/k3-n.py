#метод K ближайших соседей для K = 3

#неизвестная точка
x_1 = int(input("ведите свой рост: "))
y_1 = int(input("Введите свой вес: "))

#толстый человек
x_r1 = [150, 152, 157, 151, 159, 162, 154, 155, 153, 164]
y_r1 = [100, 85, 92, 99, 81, 88, 82, 94, 91, 90]

#худой человек
x_r2 = [177, 189, 180, 176, 183, 188, 175, 181, 190, 186]
y_r2 = [59, 53, 51, 58, 60, 52, 55, 50, 57, 54]

#создаём общий масив х рост человека
x = []

for i in x_r1:
    x.append(i)

for i in x_r2:
    x.append(i)

#создаём общий масив у вес человека
y = []

for i in y_r1:
    y.append(i)

for i in y_r2:
    y.append(i)

#создаём вложаный масив с координатами х и у
l = len(x) - 1

i = 0

xy = []

while i < l:
    i += 1
    g = []
    g.append(x[i])
    g.append(y[i])
    xy.append(g)


#ищем длину списков
len_x = len(x) - 1
len_y = len(y) - 1

#проверяем равны ли эти списки
if len_y != len_x:
    print("Допушена ошибка в одном из масиве х или у")

#создаём масив с индексами списка
kf = []
if len(kf) != len_x:
    for i in range(0, len(x)):
        kf.append(i)

#переводим см в метры
nx = []
for i in x:
    g = i / 100
    nx.append(g)

#создаём масив с кофициентом жирности, отношение веса и роста
en = []
for i in kf:
    lot = y[i] / (nx[i]**2)
    en.append(round(lot, 2))

#ищим ваш коофициент жирности
jol = y_1 / ((x_1 / 100)**2)
kf_you = round(jol, 2)

#через цикл перебирается значения по х насколько эта точка удалена от остальных по х
n = []

for i in en:
    l = i - kf_you
    n.append(round(l, 2))

#сортируем масив
k = sorted(n)

#закидываем в масив только отрецательные элементы
b = []

for i in k:
    if i < 0:
     b.append(i)

#все элементы делаем положительными
s = []

for i in b:
    g = i * -1
    s.append(g)

#находим минимальный элемент
min_1 = min(s)

#убераем уже найденый минимальный элемет из масива
s_2 = []

for i in s:
    if i > min_1:
        s_2.append(i)

#находим ещё один минимальный элемент из масива толстых
min_1_1 = min(s_2)

#закидываем в масив только положительные элементы
d = []

for i in k:
    if i > 0:
        d.append(i)

#находим минимальный элемент из положительных
min_2 = min(d)

#смотрим растояние
if min_2 <= min_1:
    if min_2 < min_1_1:
        print("Точка пренадлежит к толстым")
    else:
        print("Точка пренадлежит к худым")
else:
    print("Точка пренадлежит к худым")

#строим график для наглядности и проверки
import matplotlib.pyplot as plt
plt.scatter(x, y)
plt.scatter(x_1, y_1)
plt.show()
